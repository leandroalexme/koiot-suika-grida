import { IGraphicsAttrs } from './graphics/types';

interface TransactionRecord {
  id: string;
  before: Partial<IGraphicsAttrs>;
  after: Partial<IGraphicsAttrs>;
}

/**
 * 游꿢 Transaction - Sistema b치sico de undo/redo (como no Suika)
 * Permite reverter opera칞칫es de transforma칞칚o
 */
export class Transaction {
  private records = new Map<string, TransactionRecord>();
  private isRecording = false;

  constructor() {}

  /**
   * Iniciar uma nova transa칞칚o
   */
  start(): void {
    this.records.clear();
    this.isRecording = true;
  }

  /**
   * Registrar mudan칞a em um gr치fico
   */
  record(id: string, before: Partial<IGraphicsAttrs>, after: Partial<IGraphicsAttrs>): void {
    if (!this.isRecording) return;

    this.records.set(id, {
      id,
      before,
      after
    });
  }

  /**
   * Finalizar transa칞칚o
   */
  commit(): void {
    this.isRecording = false;
    // Em uma implementa칞칚o completa, aqui adicionar칤amos ao hist칩rico de undo
    console.log('游꿢 Transaction committed with', this.records.size, 'changes');
  }

  /**
   * Cancelar transa칞칚o
   */
  rollback(): void {
    this.isRecording = false;
    this.records.clear();
  }

  /**
   * Verificar se est치 gravando
   */
  isActive(): boolean {
    return this.isRecording;
  }

  /**
   * Obter mudan칞as registradas
   */
  getChanges(): TransactionRecord[] {
    return Array.from(this.records.values());
  }
}